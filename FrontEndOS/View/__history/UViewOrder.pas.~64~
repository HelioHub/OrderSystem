unit UViewOrder;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, cxGraphics, cxControls, cxLookAndFeels,
  cxLookAndFeelPainters, cxPCdxBarPopupMenu, Vcl.Menus, cxStyles, cxCustomData,
  cxFilter, cxData, cxDataStorage, cxEdit, cxNavigator, Data.DB, cxDBData,
  dxBevel, cxGridLevel, cxClasses, cxGridCustomView, cxGridCustomTableView,
  cxGridTableView, cxGridDBTableView, cxGrid, Vcl.StdCtrls, cxButtons, cxPC,
  cxTL, dxSkinBlue, dxSkinsCore, dxSkinscxPCPainter, cxLocalization,
  dxBarBuiltInMenu, cxDataControllerConditionalFormattingRulesManagerDialog,
  cxContainer, cxTextEdit, cxLabel, cxDBLabel, Vcl.ComCtrls, dxCore,
  cxDateUtils, cxCurrencyEdit, cxMaskEdit, cxDropDownEdit, cxCalendar, UConstants;

type
  TFViewOrder = class(TForm)
    cxTabControl1: TcxTabControl;
    cxBInclude: TcxButton;
    cxGridOrdersDBTableView1: TcxGridDBTableView;
    cxGridOrdersLevel1: TcxGridLevel;
    cxGridOrders: TcxGrid;
    cxBAlter: TcxButton;
    cxBClose: TcxButton;
    dxBevel1: TdxBevel;
    cxBDelete: TcxButton;
    DSOrders: TDataSource;
    cxLookAndFeelController1: TcxLookAndFeelController;
    cxBRefresh: TcxButton;
    cxPageControl1: TcxPageControl;
    cxTabSheet1: TcxTabSheet;
    cxLabel1: TcxLabel;
    cxLabel2: TcxLabel;
    cxLabel3: TcxLabel;
    cxLabel4: TcxLabel;
    cxGridOrdersDBTableView1Column_code_order: TcxGridDBColumn;
    cxGridOrdersDBTableView1Column_date_order: TcxGridDBColumn;
    cxGridOrdersDBTableView1Column_code_client: TcxGridDBColumn;
    cxGridOrdersDBTableView1Column_valueorder: TcxGridDBColumn;
    cxDBLabel2: TcxDBLabel;
    cxDBLabel3: TcxDBLabel;
    cxDBLabel4: TcxDBLabel;
    DSOrderItems: TDataSource;
    cxGridOrderItems: TcxGrid;
    cxGridDBTableView1: TcxGridDBTableView;
    cxGridLevel1: TcxGridLevel;
    cxGridDBTableView1Column1: TcxGridDBColumn;
    cxGridDBTableView1Column2: TcxGridDBColumn;
    cxGridDBTableView1Column3: TcxGridDBColumn;
    cxGridDBTableView1Column4: TcxGridDBColumn;
    cxGridDBTableView1Column5: TcxGridDBColumn;
    cxGridDBTableView1Column6: TcxGridDBColumn;
    dxBevel2: TdxBevel;
    cxBItems: TcxButton;
    cxGridDBTableView1Column7: TcxGridDBColumn;
    cxBReportOrder: TcxButton;
    cxGridOrdersDBTableView1Column_name_client: TcxGridDBColumn;
    cxPageControl2: TcxPageControl;
    cxTabSheet2: TcxTabSheet;
    cxLPeriod: TcxLabel;
    cxDEini: TcxDateEdit;
    cxLa: TcxLabel;
    cxDEcon: TcxDateEdit;
    cxLCodeClient: TcxLabel;
    cxCECodeOrder: TcxCurrencyEdit;
    cxTENumberRecords: TcxCurrencyEdit;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure cxBCloseClick(Sender: TObject);
    procedure cxBIncludeClick(Sender: TObject);
    procedure cxBRefreshClick(Sender: TObject);
    procedure cxBDeleteClick(Sender: TObject);
    procedure cxBAlterClick(Sender: TObject);
    procedure cxBItemsClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure cxBReportOrderClick(Sender: TObject);
    procedure cxGridOrdersDBTableView1EditDblClick(
      Sender: TcxCustomGridTableView; AItem: TcxCustomGridTableItem;
      AEdit: TcxCustomEdit);
    procedure cxGridOrdersDBTableView1MouseDown(Sender: TObject;
      Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
  private
    { Private declarations }
    procedure pCRUD(pActoin: TAction);
  public
    { Public declarations }
  end;

var
  FViewOrder: TFViewOrder;

implementation

{$R *.dfm}

uses UDMConnection, UDataOrder, UConstants, UReportOrders;

procedure TFViewOrder.cxBAlterClick(Sender: TObject);
var Form : TFDataOrder;
begin
  Form := TFDataOrder.Create (Application);
  Form.ShowModal;
end;

procedure TFViewOrder.cxBCloseClick(Sender: TObject);
begin
  Close;
end;

procedure TFViewOrder.cxBDeleteClick(Sender: TObject);
begin
  Beep;
  ShowMessage('In Development!');
end;

procedure TFViewOrder.cxBIncludeClick(Sender: TObject);
var Form : TFDataOrder;
begin
  Form := TFDataOrder.Create (Application);
  Form.ShowModal;
end;

procedure TFViewOrder.cxBItemsClick(Sender: TObject);
var sNumberRecords : String;
begin
  Try
    sNumberRecords := cNumberRecords;
  Except
    ShowMessage('Attention! Invalid number of records.');
  End;

  DSOrderItems.DataSet.Close;
  DMConnection.LoadOrders_Items(DSOrders.DataSet.FieldByName('code_order').AsString, sNumberRecords);
end;

procedure TFViewOrder.cxBRefreshClick(Sender: TObject);
begin
  if not Trim(cxDEini.Text).IsEmpty then
  begin
    if Trim(cxDEcon.Text).IsEmpty then
    begin
      Beep;
      ShowMessage('Enter the end date!');
      cxDEcon.SetFocus;
      Exit;
    end;
  end;

  if not Trim(cxDEcon.Text).IsEmpty then
  begin
    if Trim(cxDEini.Text).IsEmpty then
    begin
      Beep;
      ShowMessage('Enter the start date!');
      cxDEini.SetFocus;
      Exit;
    end;
  end;

  DSOrders.DataSet.Close;
  DMConnection.LoadOrders(Trim(cxCECodeOrder.Text), Trim(cxTENumberRecords.Text), cxDEini.Text, cxDEcon.Text);
end;

procedure TFViewOrder.cxBReportOrderClick(Sender: TObject);
var Form : TFReportOrders;
    sCodeClient : String;
begin
  Form := TFReportOrders.Create (Application);
  If Form.ShowModal = mrOk Then
  begin
    sCodeClient := Trim(Form.cxCECodeClient.Text);

    DMConnection.MemTableReportOrders.Close;
    DMConnection.LoadReportOrders(sCodeClient, Form.cxDEini.Text, Form.cxDEcon.Text);

    if sCodeClient.IsEmpty then
      DMConnection.frxReportOrders.Variables['ClientX'] := QuotedStr('All')
    else
      DMConnection.frxReportOrders.Variables['ClientX'] := QuotedStr(sCodeClient);
    DMConnection.frxReportOrders.Variables['PeriodX']   := QuotedStr(Form.cxDEini.Text+' - '+Form.cxDEcon.Text);
    DMConnection.frxReportOrders.ShowReport();
  end;
  Form.Destroy;
end;

procedure TFViewOrder.cxGridOrdersDBTableView1EditDblClick(
  Sender: TcxCustomGridTableView; AItem: TcxCustomGridTableItem;
  AEdit: TcxCustomEdit);
var Form : TFDataOrder;
begin
  Form := TFDataOrder.Create (Application);
  Form.ShowModal;
end;

procedure TFViewOrder.cxGridOrdersDBTableView1MouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  ShowHint := true;
end;

procedure TFViewOrder.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Action := CaFree;
end;

procedure TFViewOrder.FormShow(Sender: TObject);
begin
  cxTENumberRecords.Text := cNumberRecords;
end;

procedure TFViewOrder.pCRUD(pActoin: TAction);
var Form: TFDataOrder;
begin
  inherited;
  if (DSOrders.DataSet.FieldByName('code_order').IsNull) and (pActoin <> acInclude) then
  begin
    Beep;
    ShowMessage('Select a valid record '+cEOL+'to perform the desired operation.');
    Exit;
  end;

  Form := TFDataOrder.Create(Application);
  if (pActoin <> acInclude) then
  begin
    //Order
  end;

  Form.pAction := pActoin;
  Form.ShowModal;
end;

end.
