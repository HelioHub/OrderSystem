unit TestUnitTest;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, FireDAC.Phys.Intf, cxLookAndFeels, FireDAC.Comp.Client,
  cxLookAndFeelPainters, System.SysUtils, cxContainer, Vcl.Graphics, System.Classes,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, Vcl.Forms, Winapi.Messages,
  FireDAC.Stan.Async, FireDAC.Stan.Param, Vcl.ExtCtrls, FireDAC.DApt, cxEdit,
  Vcl.Controls, Data.DB, Vcl.Dialogs, FireDAC.DApt.Intf, System.Variants, FireDAC.DatS,
  cxTextEdit, UnitTest, Winapi.Windows, cxControls, FireDAC.Comp.DataSet, Vcl.StdCtrls,
  FireDAC.Stan.Error, cxCurrencyEdit, cxGraphics;

type
  // Test methods for class TFUnitTest

  TestTFUnitTest = class(TTestCase)
  strict private
    FFUnitTest: TFUnitTest;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestfCalcValueTotalOrder31;
    procedure TestfCalcValueTotalOrder32;
    procedure TestfCalcValueTotalOrder33;
    procedure TestfCalcValueTotalOrder34;
    procedure TestfCalcValueTotalOrder37;
  end;

implementation

procedure TestTFUnitTest.SetUp;
begin
  FFUnitTest := TFUnitTest.Create(Application);
end;

procedure TestTFUnitTest.TearDown;
begin
  FFUnitTest.Free;
  FFUnitTest := nil;
end;

procedure TestTFUnitTest.TestfCalcValueTotalOrder31;
var
  ReturnValue: Double;
  pIDCodeOrder: string;
begin
  // TODO: Setup method call parameters
  pIDCodeOrder := '31';
  ReturnValue := FFUnitTest.fCalcValueTotalOrder(pIDCodeOrder);
  CheckEquals(55,ReturnValue, 'Function failed Bank x Function');
  // TODO: Validate method results
end;

procedure TestTFUnitTest.TestfCalcValueTotalOrder32;
var
  ReturnValue: Double;
  pIDCodeOrder: string;
begin
  // TODO: Setup method call parameters
  pIDCodeOrder := '32';
  ReturnValue := FFUnitTest.fCalcValueTotalOrder(pIDCodeOrder);
  CheckEquals(40,ReturnValue, 'Function failed Bank x Function');
  // TODO: Validate method results
end;

procedure TestTFUnitTest.TestfCalcValueTotalOrder33;
var
  ReturnValue: Double;
  pIDCodeOrder: string;
begin
  // TODO: Setup method call parameters
  pIDCodeOrder := '33';
  ReturnValue := FFUnitTest.fCalcValueTotalOrder(pIDCodeOrder);
  CheckEquals(40,ReturnValue, 'Function failed Bank x Function');
  // TODO: Validate method results
end;

procedure TestTFUnitTest.TestfCalcValueTotalOrder34;
var
  ReturnValue: Double;
  pIDCodeOrder: string;
begin
  // TODO: Setup method call parameters
  pIDCodeOrder := '34';
  ReturnValue := FFUnitTest.fCalcValueTotalOrder(pIDCodeOrder);
  CheckEquals(50,ReturnValue, 'Function failed Bank x Function');
  // TODO: Validate method results
end;

procedure TestTFUnitTest.TestfCalcValueTotalOrder37;
var
  ReturnValue: Double;
  pIDCodeOrder: string;
begin
  // TODO: Setup method call parameters
  pIDCodeOrder := '37';
  ReturnValue := FFUnitTest.fCalcValueTotalOrder(pIDCodeOrder);
  CheckEquals(40,ReturnValue, 'Function failed Bank x Function');
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTFUnitTest.Suite);
end.

